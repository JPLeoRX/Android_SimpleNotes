package com.tekleo.simple_notes.util.data_structures;

/**
 * Created by Leo on 23-Jan-16.
 */

import java.io.Serializable;

/**
 * Node of a binary tree data structure. Has links to right and left children and to the parent.
 * @param <E> type of objects stored
 */
public class BinaryTreeNode<E extends Comparable> implements Serializable
{
    private E data;                                                 // Data stored in this node
    private BinaryTreeNode<E> left;                                 // Pointer to left node
    private BinaryTreeNode<E> right;                                // Pointer to right node
    private BinaryTreeNode<E> parent;                               // Pointer to parent node

    //------------------------------------------------------------------------------------------------------------------
    //-------------------------------------------- Constructors --------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    public BinaryTreeNode(E data) {
        this.data = data;
    }

    public BinaryTreeNode(E data, BinaryTreeNode<E> left, BinaryTreeNode<E> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------



    //------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------- Getters -----------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    public E getData() {
        return data;
    }

    public BinaryTreeNode<E> getLeft() {
        return left;
    }

    public BinaryTreeNode<E> getRight() {
        return right;
    }

    public BinaryTreeNode<E> getParent() {
        return parent;
    }
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------



    //------------------------------------------------------------------------------------------------------------------
    //---------------------------------------------- Setters -----------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    public void setData(E data) {
        this.data = data;
    }

    public void setLeft(BinaryTreeNode<E> left) {
        this.left = left;
        if (left != null)
            left.parent = this;
    }

    public void setRight(BinaryTreeNode<E> right) {
        this.right = right;
        if (right != null)
            right.parent = this;
    }
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------



    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------ Indicators ------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    public boolean hasLeftChild() {
        return left != null;
    }

    public boolean hasRightChild() {
        return right != null;
    }

    public boolean hasParent() {
        return parent != null;
    }

    public boolean hasNoLeftChild() {
        return left == null;
    }

    public boolean hasNoRightChild() {
        return right == null;
    }

    public boolean hasNoParent() {
        return parent == null;
    }

    public boolean isParentsLeft() {
        return parent.getLeft() == this;
    }

    public boolean isParentsRight() {
        return parent.getRight() == this;
    }
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------



    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------ Traversing ------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    public BinaryTreeNode<E> findLeftMostChild()
    {
        BinaryTreeNode<E> leftMost = this;
        while (leftMost.getLeft() != null)
            leftMost = leftMost.getLeft();
        return leftMost;
    }

    public BinaryTreeNode<E> findRightMostChild()
    {
        BinaryTreeNode<E> rightMost = this;
        while (rightMost.getRight() != null)
            rightMost = rightMost.getRight();
        return rightMost;
    }
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------



    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------- Comparing ------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    public int compareTo(E otherData) {
        return data.compareTo(otherData);
    }

    public int compareTo(BinaryTreeNode<E> otherNode) {
        return data.compareTo(otherNode.data);
    }
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------
}